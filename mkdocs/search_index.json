{
    "docs": [
        {
            "location": "/",
            "text": "What is ConFindr?\n\n\nConFindr is a pipeline that can detect contamination in bacterial NGS data, both between and within species. It can do this with exceptional sensitivity - two samples mixed together with as few as 500 SNPs between them (> 99.9 percent identity!) can be identified. This allows for stringent quality control of NGS samples.\n\n\nHow Does ConFindr Work?\n\n\nBrief Overview\n\n\nADD IMAGE HERE EVENTUALLY\n\n\nConFindr works by looking at rMLST genes. These 53 genes are known to be single copy and conserved across all bacteria, making them excellent markers. As they are known to be single copy (with some caveats), any sample that has multiple alleles of one or more rMLST gene is likely to be contaminated. To identify the presence of multiple alleles in a sample, the following workflow is followed:\n\n\n\n\nDetermine the genus of each sample so that genus-specific rMLST databases can be constructed.\n\n\nPerform stringent quality trimming and bait out reads that contain rMLST gene sequence, using BBDuk.\n\n\nSubsample rMLST reads to a depth of approximately 20X.\n\n\nSplit reads into kmers using jellyfish - typically to a size of k=31. \n\n\nCompare all of the kmers found to all other kmers found, looking for pairs of kmers that differ only by one substitution - these are assumed to represent multiple alleles of the same gene.\n\n\nRepeat steps 3-5 a few times (typically 5) and take the median number of contaminating kmers from these repetitions.\n\n\nUse Mash to do a quick check for cross-species contamination.\n\n\n\n\nDetailed Overview & FAQ\n\n\nWhy Subsample Reads?\n\n\nIn our testing, the coverage depth of samples we tested varied wildly. Some samples had as little coverage as 20-30X, while others were well over 200X. We found that samples with very high coverage (over 100X) frequently had false positive results coming up, as some kmers were present often enough due to sequencing error to look like another allele was present. Enforcing a higher cutoff for number of kmers present on the high depth samples caused drastic cuts to sensitivity. Subsampling reads to 20X coverage prevents sequencing errors while maintaining good sensitivity.\n\n\nWhy Not Just Map Reads to the rMLST Database?\n\n\nThe obvious way to approach this problem would be to map reads to the rMLST database and look for hits to multiple alleles of the same gene. This approach was attempted in early iterations of the pipeline, but was found to work fairly poorly. The issue here was that many rMLST alleles are similar enough that the same read will map to many of them. Because of this, we would often only have one or two reads that mapped unambiguously to rMLST genes across a sample - not enough to reliably call contamination.",
            "title": "Home"
        },
        {
            "location": "/#what-is-confindr",
            "text": "ConFindr is a pipeline that can detect contamination in bacterial NGS data, both between and within species. It can do this with exceptional sensitivity - two samples mixed together with as few as 500 SNPs between them (> 99.9 percent identity!) can be identified. This allows for stringent quality control of NGS samples.",
            "title": "What is ConFindr?"
        },
        {
            "location": "/#how-does-confindr-work",
            "text": "Brief Overview  ADD IMAGE HERE EVENTUALLY  ConFindr works by looking at rMLST genes. These 53 genes are known to be single copy and conserved across all bacteria, making them excellent markers. As they are known to be single copy (with some caveats), any sample that has multiple alleles of one or more rMLST gene is likely to be contaminated. To identify the presence of multiple alleles in a sample, the following workflow is followed:   Determine the genus of each sample so that genus-specific rMLST databases can be constructed.  Perform stringent quality trimming and bait out reads that contain rMLST gene sequence, using BBDuk.  Subsample rMLST reads to a depth of approximately 20X.  Split reads into kmers using jellyfish - typically to a size of k=31.   Compare all of the kmers found to all other kmers found, looking for pairs of kmers that differ only by one substitution - these are assumed to represent multiple alleles of the same gene.  Repeat steps 3-5 a few times (typically 5) and take the median number of contaminating kmers from these repetitions.  Use Mash to do a quick check for cross-species contamination.   Detailed Overview & FAQ  Why Subsample Reads?  In our testing, the coverage depth of samples we tested varied wildly. Some samples had as little coverage as 20-30X, while others were well over 200X. We found that samples with very high coverage (over 100X) frequently had false positive results coming up, as some kmers were present often enough due to sequencing error to look like another allele was present. Enforcing a higher cutoff for number of kmers present on the high depth samples caused drastic cuts to sensitivity. Subsampling reads to 20X coverage prevents sequencing errors while maintaining good sensitivity.  Why Not Just Map Reads to the rMLST Database?  The obvious way to approach this problem would be to map reads to the rMLST database and look for hits to multiple alleles of the same gene. This approach was attempted in early iterations of the pipeline, but was found to work fairly poorly. The issue here was that many rMLST alleles are similar enough that the same read will map to many of them. Because of this, we would often only have one or two reads that mapped unambiguously to rMLST genes across a sample - not enough to reliably call contamination.",
            "title": "How Does ConFindr Work?"
        },
        {
            "location": "/install/",
            "text": "System Requirements\n\n\nConFindr has a fair number of dependencies. The easiest way to install ConFindr is by using docker, but other methods are also possible. \nTesting of ConFindr has been done with Ubuntu 16.04 and Linux Mint. Other variants of linux should have no issues,\nand MacOS systems should also work. Windows is not supported at this time, but Windows users should be able to use the docker version.\n\n\nInstalling Using Docker\n\n\nTo install using docker: \ndocker pull olcbioinformatics/confindr\n\n\nThis should download the newest image, complete with the databases that ConFindr needs. For usage with docker, see the Usage page (HYPERLINK ME!)\n\n\nInstalling Using Pip\n\n\nExecutable\n\n\nConFindr can also be installed using pip. Use of a virtual environment for ConFindr is highly recommended. To create a virtualenv:\n\n\n\n\nCreate an empty directory (i.e. \nmkdir ~/Virtual_Environments/ConFindr\n)\n\n\nVirtualenv that directory (\nvirtualenv -p /usr/bin/python3 ~/Virtual_Environments/ConFindr\n)\n\n\nActivate the virtualenv (\nsource ~/Virtual_Environments/ConFindr/bin/activate\n)\n\n\nInstall ConFindr - this should also install any packages that ConFindr depends on (\npip install confindr\n)\n\n\n\n\nWith this done, you'll need to make sure that any necessary dependencies are installed.\n\n\nDependencies\n\n\nBefore using ConFindr, you'll need to download and add the following programs to your $PATH:\n\n\n\n\nBBTools (>=37.23)\n\n\nJellyfish (>= 2.2.6)\n\n\nNCBI BLAST+ (>=2.2.31\n\n\nMash (>=2.0)\n\n\nPython (>=3.5)\n\n\n\n\nInstructions on adding programs to your $PATH can be found \nhere\n.\n\n\nIf ConFindr can't find these dependencies when you try to run it, you will see an error message. ConFindr will continue to attempt to run, but will likely crash at some point in the process.\n\n\nDatabases\n\n\nThe databases necessary for making ConFindr run are available for download from FigShare.\n\n\nNavigate to the place you would like to download the database, and use the following commands to download and uncompress the folder:\n\n\nwget https://ndownloader.figshare.com/files/9827251\ntar xf 9827251\n\n\nThese commands should create a folder called \ndatabases\n in your current working directory. This folder contains everything you need to run ConFindr - it's what will be specified with the \n-d\n option.",
            "title": "Installation"
        },
        {
            "location": "/install/#system-requirements",
            "text": "ConFindr has a fair number of dependencies. The easiest way to install ConFindr is by using docker, but other methods are also possible. \nTesting of ConFindr has been done with Ubuntu 16.04 and Linux Mint. Other variants of linux should have no issues,\nand MacOS systems should also work. Windows is not supported at this time, but Windows users should be able to use the docker version.",
            "title": "System Requirements"
        },
        {
            "location": "/install/#installing-using-docker",
            "text": "To install using docker:  docker pull olcbioinformatics/confindr  This should download the newest image, complete with the databases that ConFindr needs. For usage with docker, see the Usage page (HYPERLINK ME!)",
            "title": "Installing Using Docker"
        },
        {
            "location": "/install/#installing-using-pip",
            "text": "Executable  ConFindr can also be installed using pip. Use of a virtual environment for ConFindr is highly recommended. To create a virtualenv:   Create an empty directory (i.e.  mkdir ~/Virtual_Environments/ConFindr )  Virtualenv that directory ( virtualenv -p /usr/bin/python3 ~/Virtual_Environments/ConFindr )  Activate the virtualenv ( source ~/Virtual_Environments/ConFindr/bin/activate )  Install ConFindr - this should also install any packages that ConFindr depends on ( pip install confindr )   With this done, you'll need to make sure that any necessary dependencies are installed.  Dependencies  Before using ConFindr, you'll need to download and add the following programs to your $PATH:   BBTools (>=37.23)  Jellyfish (>= 2.2.6)  NCBI BLAST+ (>=2.2.31  Mash (>=2.0)  Python (>=3.5)   Instructions on adding programs to your $PATH can be found  here .  If ConFindr can't find these dependencies when you try to run it, you will see an error message. ConFindr will continue to attempt to run, but will likely crash at some point in the process.  Databases  The databases necessary for making ConFindr run are available for download from FigShare.  Navigate to the place you would like to download the database, and use the following commands to download and uncompress the folder:  wget https://ndownloader.figshare.com/files/9827251\ntar xf 9827251  These commands should create a folder called  databases  in your current working directory. This folder contains everything you need to run ConFindr - it's what will be specified with the  -d  option.",
            "title": "Installing Using Pip"
        },
        {
            "location": "/usage/",
            "text": "Usage with a Pip Install\n\n\nIf you used pip to install, all you need to do is type \nconfindr.py\n on the command line. Doing so without providing parameters will give a message telling you what parameters you do need to provide.\n\n\nThe parameters you need to provide are:\n\n\n\n\n-i, --input_directory\n: The path to a directory containing the reads, in FASTQ format, that you want analyzed.\n\n\n-o, --output_name\n: The base name for your output. For example, putting \n/home/user/confindr_output\n would create an output file called \n/home/user/confindr_output/confindr_report.csv\n\n\n-d, ---databases\n: The path to the databases directory obtained when downloading the \ndatabases\n folder from FigShare..\n\n\n\n\nSo, if the ConFindr repository was cloned to \n/home/user\n and the data to be analyzed is in \n/home/user/example-data\n, the command to run ConFindr would be:\n\n\nconfindr.py -i /home/user/example-data -o /home/user/confindr_output -d /home/user/ConFindr/databases/\n\n\nThis command will create a file called \n/home/user/confindr_output/confindr_report.csv\n with results.\n\n\nUsage with Docker\n\n\nUsage with docker is very similar to usage with a pip install. In order to have the output from the docker container accessible by you, you'll need to mount some folders - it's recommended to put the output in your input folder in this case. In this case, if the data to be analyzed is in \n/home/user/example-data\n, the command to run ConFindr would be:\n\n\ndocker run -v /home/user/example-data/:/home/user/example-data/ olcbioinformatics/confindr confindr.py /home/user/example-data/ /home/user/example-data/confindr_output /home/user/ConFindr/databases/\n \n\n\nIn this case, the output file \nconfindr_output.csv\n will be found in \n/home/user/example-data/\n.\n\n\nOptional Arguments\n\n\nConFindr has a few optional arguments that allow you to modify its other parameters. Optional arguments are:\n\n\n\n\n-t, --threads\n: The number of threads to run ConFindr analysis with. The default is to use all threads available on your machine, and ConFindr scales very well with more threads, so it's recommended that this option be left at the default unless you need the computational resources for somethin else.\n\n\n-n, --number_subsamples\n: The number of times you want ConFindr to sample your rMLST reads to try to detect contamination. By default this is set to 5.\n\n\n-k, --kmer-size\n: The kmer size ConFindr uses to try to detect contamination. Default is 31. Usage with other values may produce very unreliable results and is \nnot\n recommended.\n\n\n-s, --subsample_depth\n: Coverage depth to subsample to. Default value is 20, which provides a good tradeoff between sensitvity and specificity. Going any lower will make it very difficult to detect contamination, and going higher will increase the false positive rate.\n\n\n-c, --kmer_cutoff\n: The cutoff for the number of times a kmer must be seen before it is considered trustworthy and is included in the analysis. By default set to 2. Setting any lower this this essentially guarantees that your analysis will be overrun by false positives called by sequencing errors.\n\n\n-fid, --forward_id\n: The identifier for forward reads in your input FASTQ folder. By default, this is \n_R1\n. If you follow a different naming scheme, this is the parameter to change.\n\n\n-rid, --reverse_id\n: The identifier for reverse reads in your input FASTQ folder. By default, this is \n_R2\n. If you follow a different naming scheme, this is the parameter to change. \n\n\n\n\nGenerally speaking, none of these parameters should be changed; ConFindr has been tested extensively with its default parameters and been found to work very well.",
            "title": "Usage"
        },
        {
            "location": "/usage/#usage-with-a-pip-install",
            "text": "If you used pip to install, all you need to do is type  confindr.py  on the command line. Doing so without providing parameters will give a message telling you what parameters you do need to provide.  The parameters you need to provide are:   -i, --input_directory : The path to a directory containing the reads, in FASTQ format, that you want analyzed.  -o, --output_name : The base name for your output. For example, putting  /home/user/confindr_output  would create an output file called  /home/user/confindr_output/confindr_report.csv  -d, ---databases : The path to the databases directory obtained when downloading the  databases  folder from FigShare..   So, if the ConFindr repository was cloned to  /home/user  and the data to be analyzed is in  /home/user/example-data , the command to run ConFindr would be:  confindr.py -i /home/user/example-data -o /home/user/confindr_output -d /home/user/ConFindr/databases/  This command will create a file called  /home/user/confindr_output/confindr_report.csv  with results.",
            "title": "Usage with a Pip Install"
        },
        {
            "location": "/usage/#usage-with-docker",
            "text": "Usage with docker is very similar to usage with a pip install. In order to have the output from the docker container accessible by you, you'll need to mount some folders - it's recommended to put the output in your input folder in this case. In this case, if the data to be analyzed is in  /home/user/example-data , the command to run ConFindr would be:  docker run -v /home/user/example-data/:/home/user/example-data/ olcbioinformatics/confindr confindr.py /home/user/example-data/ /home/user/example-data/confindr_output /home/user/ConFindr/databases/    In this case, the output file  confindr_output.csv  will be found in  /home/user/example-data/ .",
            "title": "Usage with Docker"
        },
        {
            "location": "/usage/#optional-arguments",
            "text": "ConFindr has a few optional arguments that allow you to modify its other parameters. Optional arguments are:   -t, --threads : The number of threads to run ConFindr analysis with. The default is to use all threads available on your machine, and ConFindr scales very well with more threads, so it's recommended that this option be left at the default unless you need the computational resources for somethin else.  -n, --number_subsamples : The number of times you want ConFindr to sample your rMLST reads to try to detect contamination. By default this is set to 5.  -k, --kmer-size : The kmer size ConFindr uses to try to detect contamination. Default is 31. Usage with other values may produce very unreliable results and is  not  recommended.  -s, --subsample_depth : Coverage depth to subsample to. Default value is 20, which provides a good tradeoff between sensitvity and specificity. Going any lower will make it very difficult to detect contamination, and going higher will increase the false positive rate.  -c, --kmer_cutoff : The cutoff for the number of times a kmer must be seen before it is considered trustworthy and is included in the analysis. By default set to 2. Setting any lower this this essentially guarantees that your analysis will be overrun by false positives called by sequencing errors.  -fid, --forward_id : The identifier for forward reads in your input FASTQ folder. By default, this is  _R1 . If you follow a different naming scheme, this is the parameter to change.  -rid, --reverse_id : The identifier for reverse reads in your input FASTQ folder. By default, this is  _R2 . If you follow a different naming scheme, this is the parameter to change.    Generally speaking, none of these parameters should be changed; ConFindr has been tested extensively with its default parameters and been found to work very well.",
            "title": "Optional Arguments"
        }
    ]
}