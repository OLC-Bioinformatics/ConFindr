{
    "docs": [
        {
            "location": "/",
            "text": "What is ConFindr?\n\n\nConFindr is a pipeline that can detect contamination in bacterial NGS data, both between and within species. It can do this with pretty darn good sensitivity - two samples mixed together with as few as\n500 SNPs between them (> 99.9 percent identity!) can be identified. This allows for stringent quality control of NGS samples.\n\n\nHow Does ConFindr Work?\n\n\nConFindr works by looking at conserved core genes - either using rMLST genes (53 genes are known to be single copy and conserved across all bacteria with some known exceptions, which ConFindr handles), or \n custom sets of genes derived from core-genome schemes. As the genes ConFindr looks at are single copy, any sample that has multiple alleles of one or more gene is likely to be contaminated. \nTo identify the presence of multiple alleles in a sample, the following workflow is followed:\n\n\n\n\nUse Mash to determine the genus of each sample so that genus-specific databases can be constructed\nand check for interspecies contamination.\n\n\nPerform stringent quality trimming and bait out reads that contain rMLST gene sequence, using BBDuk.\n\n\nAlign reads back to the rMLST genes.\n\n\nLook at the alignment to find \nContaminating SNVs\n - those that have sites where more than one base is present, indicating\nthat multiple alleles are present, indicating contamination.\n\n\n\n\nLimits of Detection\n\n\nIntraspecies\n\n\nThe limit of detection for ConFindr is going to be a function of several factors, so it's hard to give\nexact information on what can and can't be detected. However, here are a few guidelines:\n\n\n\n\nTwo strains with identical rMLST genes won't ever have contamination detected between them. \n\n\nConFindr has a cutoff of finding 3 \nContaminating SNVs\n found for calling a sample as contaminated, as\nthere will occasionally be 1 false positive, and very rarely 2 false positive sites. In practice, this still lets you detect\ncontamination essentially whenever two strains have different rMLST types, as >99 percent of types have\nat least 3 SNPs between them in \nE. coli\n, \nS. enterica\n, and \nL. monocytogenes\n. I haven't looked at other\nspecies in detail, but this very likely holds true for them too.\n\n\nThe degree of contamination matters: things with very low levels of contamination (around 1 percent) probably\nwon't ever be picked up under default parameters. Once you hit 5 percent contamination, whether or not it gets\ndetected is a function of sequencing depth and distance between species.\n\n\nSequencing depth matters: \nContaminating SNVs\n are found more reliably the more depth you have. ConFindr seems\nto work pretty well once you hit 40X or 50X, but trying to run it on a sample with only 10X coverage is unlikely to ever\nfind anything (unless default parameters get changed)\n\n\nRelatedness of the contaminant strain is the the final major factor - with something very closely related to the\nstrain you actually want, picking up contamination at 5 percent will be pretty difficult.\n\n\n\n\nThe below graph shows the magnitude of contamination detected for several synthetic datasets in \nEscherichia coli\n.\nStrains were mixed together that were either identical (and so should have no contamination), not identical but\nhave the same rMLST type (and so are contaminated, but beyond the limit of detection), two strains with the same serotype,\nand therefore very closely related, or two strains of differing serotypes.\n\n\nThe black line on the graph represents our cutoff for contaminated samples - any sample with a magnitude above that\ncan reliably be called contaminated. As can be seen, two different serotypes from the same species are reliably detected\nat contamination levels of 5 percent or higher, two strains of the same serotype are often detected at 10 percent\ncontamination and almost always at 20 percent contamination, and two strains that have the same rMLST or are identical\nnever have contamination detected. Results should be very similar for other species.\n\n\n\n\nInterspecies\n\n\nConFindr seems to reliably be able to detect interspecies contamination at levels of 5 percent or above, but its checks\nfor interspecies contamination are not particularly rigorous. If you're very worried about interspecies contamination,\nit would be a good idea to put your samples through some sort of metagenomics software (such as Kraken or Kaiju).\n\n\nFeedback\n\n\nIf you run into any issues installing or running ConFindr, have feature requests, want some help interpreting results, or\nanything else, feel free to open an issue on GitHub or send me an email at \nandrew.low@canada.ca\n.",
            "title": "Home"
        },
        {
            "location": "/#what-is-confindr",
            "text": "ConFindr is a pipeline that can detect contamination in bacterial NGS data, both between and within species. It can do this with pretty darn good sensitivity - two samples mixed together with as few as\n500 SNPs between them (> 99.9 percent identity!) can be identified. This allows for stringent quality control of NGS samples.  How Does ConFindr Work?  ConFindr works by looking at conserved core genes - either using rMLST genes (53 genes are known to be single copy and conserved across all bacteria with some known exceptions, which ConFindr handles), or \n custom sets of genes derived from core-genome schemes. As the genes ConFindr looks at are single copy, any sample that has multiple alleles of one or more gene is likely to be contaminated. \nTo identify the presence of multiple alleles in a sample, the following workflow is followed:   Use Mash to determine the genus of each sample so that genus-specific databases can be constructed\nand check for interspecies contamination.  Perform stringent quality trimming and bait out reads that contain rMLST gene sequence, using BBDuk.  Align reads back to the rMLST genes.  Look at the alignment to find  Contaminating SNVs  - those that have sites where more than one base is present, indicating\nthat multiple alleles are present, indicating contamination.   Limits of Detection  Intraspecies  The limit of detection for ConFindr is going to be a function of several factors, so it's hard to give\nexact information on what can and can't be detected. However, here are a few guidelines:   Two strains with identical rMLST genes won't ever have contamination detected between them.   ConFindr has a cutoff of finding 3  Contaminating SNVs  found for calling a sample as contaminated, as\nthere will occasionally be 1 false positive, and very rarely 2 false positive sites. In practice, this still lets you detect\ncontamination essentially whenever two strains have different rMLST types, as >99 percent of types have\nat least 3 SNPs between them in  E. coli ,  S. enterica , and  L. monocytogenes . I haven't looked at other\nspecies in detail, but this very likely holds true for them too.  The degree of contamination matters: things with very low levels of contamination (around 1 percent) probably\nwon't ever be picked up under default parameters. Once you hit 5 percent contamination, whether or not it gets\ndetected is a function of sequencing depth and distance between species.  Sequencing depth matters:  Contaminating SNVs  are found more reliably the more depth you have. ConFindr seems\nto work pretty well once you hit 40X or 50X, but trying to run it on a sample with only 10X coverage is unlikely to ever\nfind anything (unless default parameters get changed)  Relatedness of the contaminant strain is the the final major factor - with something very closely related to the\nstrain you actually want, picking up contamination at 5 percent will be pretty difficult.   The below graph shows the magnitude of contamination detected for several synthetic datasets in  Escherichia coli .\nStrains were mixed together that were either identical (and so should have no contamination), not identical but\nhave the same rMLST type (and so are contaminated, but beyond the limit of detection), two strains with the same serotype,\nand therefore very closely related, or two strains of differing serotypes.  The black line on the graph represents our cutoff for contaminated samples - any sample with a magnitude above that\ncan reliably be called contaminated. As can be seen, two different serotypes from the same species are reliably detected\nat contamination levels of 5 percent or higher, two strains of the same serotype are often detected at 10 percent\ncontamination and almost always at 20 percent contamination, and two strains that have the same rMLST or are identical\nnever have contamination detected. Results should be very similar for other species.   Interspecies  ConFindr seems to reliably be able to detect interspecies contamination at levels of 5 percent or above, but its checks\nfor interspecies contamination are not particularly rigorous. If you're very worried about interspecies contamination,\nit would be a good idea to put your samples through some sort of metagenomics software (such as Kraken or Kaiju).  Feedback  If you run into any issues installing or running ConFindr, have feature requests, want some help interpreting results, or\nanything else, feel free to open an issue on GitHub or send me an email at  andrew.low@canada.ca .",
            "title": "What is ConFindr?"
        },
        {
            "location": "/install/",
            "text": "System Requirements\n\n\nConFindr has been tested with Debian-based Linux systems, \nbut should in principle work on any flavour of Linux, as well as MacOSX. \nWindows isn't supported, but it may very well be installable via bioconda. If you have any success running\nConFindr on a Windows machine, let me know!\n\n\nConFindr should run on any regular desktop/laptop with 8 GB or RAM or more.\n\n\nDownloading ConFindr Databases\n\n\nAs of ConFindr 0.7.0, databases for detecting contamination in \nEscherichia\n, \nListeria\n, and \nSalmonella\n derived from\ncore-gene schemes are freely available and will be automatically downloaded by ConFindr when it runs. If you only want \nto run ConFindr on these three genera, nothing further is necessary. If you want to run ConFindr on any other genera, keep\nreading on how to get access to the necessary databases.\n\n\nConFindr uses the ribosomal multi-locus sequence typing (rMLST) scheme to detect contamination in genera other \nthan the ones listed above. These databases are \nfreely available, but you will need to jump through a few hoops before you can get access to them due to an \nassociated \nlicence agreement\n.\n\n\nHere are the steps to getting databases downloaded:\n\n\n\n\n\n\nRegister for a PubMLST account if you do not already have one. Link to register is \nhere\n. \nClick on \nRegister for a site-wide account.\n\n\n\n\n\n\nLogin to your account at \nhttps://pubmlst.org/bigsdb\n and request access to \nRibosomal MLST genome and Ribosomal MLST locus/sequence definitions under \nRegistrations\n. Additionally, email Keith Jolley\n(keith.jolley@zoo.ox.ac.uk) and request a consumer key and consumer secret so that you'll be able\nto access the database programatically.\n\n\n\n\n\n\nOnce you've gotten your consumer key and consumer secret from Keith, put them into a text file\nwith the key on the first line and the secret on the second. It should look something like the below\nsnippet:\n\n\n\n\n\n\nefKXmqp2D0EBlMBkZaGC2lPf\nF$M+fQ2AFFB2YBDfF9fpHF^qSWJdmmN%L4Fxf5Gur3\n\n\n\n\n\n\n\n\nInstall ConFindr as shown in the next section.\n\n\n\n\n\n\nWith ConFindr installed, use the command \nconfindr_database_setup\n to have ConFindr download the latest version\nof the rMLST databases. This script takes two arguments - a \n-s\n where you give the path to the text file containing your consumer \nkey and secret, and a \n-o\n to specify where you want the sequences downloaded. Only the \n-s\n is mandatory. If your output\ndirectory is not specified, ConFindr will first search for an environmental variable called \nCONFINDR_DB\n, and if it can't\nfind that it will automatically download to a folder called \n.confindr_db\n in your home directory.\n\n\n\n\n\n\nInstalling Using Conda (Recommended)\n\n\nConFindr is available within bioconda - to get bioconda installed and running see instructions \nhere\n.\n\n\nWith bioconda running, you can install ConFindr with the following command:\n\n\nconda install -c bioconda confindr\n\n\nWith that done, typing \nconfindr.py\n will bring access the ConFindr pipeline. See the \nUsage\n section for instructions on how to use ConFindr, including a ConFindr run on an example dataset.\n\n\nManual Install\n\n\nExecutable\n\n\nConFindr can also be installed using pip. Use of a virtual environment for ConFindr is highly recommended. To create a virtualenv:\n\n\n\n\nCreate an empty directory (i.e. \nmkdir ~/Virtual_Environments/ConFindr\n)\n\n\nVirtualenv that directory (\nvirtualenv -p /usr/bin/python3 ~/Virtual_Environments/ConFindr\n)\n\n\nActivate the virtualenv (\nsource ~/Virtual_Environments/ConFindr/bin/activate\n)\n\n\nInstall ConFindr - this should also install any packages that ConFindr depends on (\npip install confindr\n)\n\n\n\n\nWith this done, you'll need to make sure that any necessary dependencies are installed.\n\n\nDependencies\n\n\nBefore using ConFindr, you'll need to download and add the following programs to your $PATH:\n\n\n\n\nBBTools (>=37.23)\n\n\nMash (>=2.0)\n\n\nKMA (>=1.2.0)\n\n\nPython (>=3.5)\n\n\n\n\nIf you want to run in Nanopore mode, you'll also need to get \nminimap2\n.\n\n\nInstructions on adding programs to your $PATH can be found \nhere\n.\n\n\nIf ConFindr can't find these dependencies when you try to run it, you will see an error message and the program will quit.",
            "title": "Installation"
        },
        {
            "location": "/install/#system-requirements",
            "text": "ConFindr has been tested with Debian-based Linux systems, \nbut should in principle work on any flavour of Linux, as well as MacOSX. \nWindows isn't supported, but it may very well be installable via bioconda. If you have any success running\nConFindr on a Windows machine, let me know!  ConFindr should run on any regular desktop/laptop with 8 GB or RAM or more.",
            "title": "System Requirements"
        },
        {
            "location": "/install/#downloading-confindr-databases",
            "text": "As of ConFindr 0.7.0, databases for detecting contamination in  Escherichia ,  Listeria , and  Salmonella  derived from\ncore-gene schemes are freely available and will be automatically downloaded by ConFindr when it runs. If you only want \nto run ConFindr on these three genera, nothing further is necessary. If you want to run ConFindr on any other genera, keep\nreading on how to get access to the necessary databases.  ConFindr uses the ribosomal multi-locus sequence typing (rMLST) scheme to detect contamination in genera other \nthan the ones listed above. These databases are \nfreely available, but you will need to jump through a few hoops before you can get access to them due to an \nassociated  licence agreement .  Here are the steps to getting databases downloaded:    Register for a PubMLST account if you do not already have one. Link to register is  here . \nClick on  Register for a site-wide account.    Login to your account at  https://pubmlst.org/bigsdb  and request access to \nRibosomal MLST genome and Ribosomal MLST locus/sequence definitions under  Registrations . Additionally, email Keith Jolley\n(keith.jolley@zoo.ox.ac.uk) and request a consumer key and consumer secret so that you'll be able\nto access the database programatically.    Once you've gotten your consumer key and consumer secret from Keith, put them into a text file\nwith the key on the first line and the secret on the second. It should look something like the below\nsnippet:    efKXmqp2D0EBlMBkZaGC2lPf\nF$M+fQ2AFFB2YBDfF9fpHF^qSWJdmmN%L4Fxf5Gur3    Install ConFindr as shown in the next section.    With ConFindr installed, use the command  confindr_database_setup  to have ConFindr download the latest version\nof the rMLST databases. This script takes two arguments - a  -s  where you give the path to the text file containing your consumer \nkey and secret, and a  -o  to specify where you want the sequences downloaded. Only the  -s  is mandatory. If your output\ndirectory is not specified, ConFindr will first search for an environmental variable called  CONFINDR_DB , and if it can't\nfind that it will automatically download to a folder called  .confindr_db  in your home directory.",
            "title": "Downloading ConFindr Databases"
        },
        {
            "location": "/install/#installing-using-conda-recommended",
            "text": "ConFindr is available within bioconda - to get bioconda installed and running see instructions  here .  With bioconda running, you can install ConFindr with the following command:  conda install -c bioconda confindr  With that done, typing  confindr.py  will bring access the ConFindr pipeline. See the  Usage  section for instructions on how to use ConFindr, including a ConFindr run on an example dataset.",
            "title": "Installing Using Conda (Recommended)"
        },
        {
            "location": "/install/#manual-install",
            "text": "Executable  ConFindr can also be installed using pip. Use of a virtual environment for ConFindr is highly recommended. To create a virtualenv:   Create an empty directory (i.e.  mkdir ~/Virtual_Environments/ConFindr )  Virtualenv that directory ( virtualenv -p /usr/bin/python3 ~/Virtual_Environments/ConFindr )  Activate the virtualenv ( source ~/Virtual_Environments/ConFindr/bin/activate )  Install ConFindr - this should also install any packages that ConFindr depends on ( pip install confindr )   With this done, you'll need to make sure that any necessary dependencies are installed.  Dependencies  Before using ConFindr, you'll need to download and add the following programs to your $PATH:   BBTools (>=37.23)  Mash (>=2.0)  KMA (>=1.2.0)  Python (>=3.5)   If you want to run in Nanopore mode, you'll also need to get  minimap2 .  Instructions on adding programs to your $PATH can be found  here .  If ConFindr can't find these dependencies when you try to run it, you will see an error message and the program will quit.",
            "title": "Manual Install"
        },
        {
            "location": "/usage/",
            "text": "Example Dataset\n\n\nAn example dataset has been uploaded to FigShare. You can download it to your current working directory with the following command:\n\n\nwget https://ndownloader.figshare.com/files/9972709 && tar xf 9972709\n\n\nThis example dataset contains two different serotypes of \nEscherichia coli\n mixed together - it's about 80/20 split of O103 and O157. Contamination like this is difficult to detect\nwith regular tools - it's possible to pick up that it's two different strains, but it can be finicky. ConFindr, however, has no difficulty picking up the fact that this sample is contaminated.\n\n\nIn order to have ConFindr analyze this sample, the parameters you need to provide are:\n\n\n\n\n-i, --input_directory\n: The path to a directory containing the reads, in FASTQ format, that you want analyzed. If you're using the example dataset, you'll want to enter \nexample-data\n\n\n-o, --output_name\n: The base name for your output. If you put \noutput\n for this parameter, a folder called \noutput\n will be created, and a file called \nconfindr_report.csv\n with contamination\ninformation will be created in this folder\n\n\n\n\nSo, if the \nexample-data\n folder were downloaded to your current working directory and you want to have an output folder called \noutput\n, the command to run ConFindr would be:\n\n\nconfindr.py -i example-data -o output\n\n\nYou can use absolute or relative paths, and trailing slashes are also acceptable for the directories specified.\nIf ConFindr is properly installed, you should see something similar to the following appear on your terminal:\n\n\n  2019-04-02 15:06:04  Welcome to ConFindr 0.7.0! Beginning analysis of your samples... \n  2019-04-02 15:06:04  Could not find Escherichia_db_cgderived.fasta \n  2019-04-02 15:06:04  Could not find Listeria_db_cgderived.fasta \n  2019-04-02 15:06:04  Could not find Salmonella_db_cgderived.fasta \n  2019-04-02 15:06:04  Could not find refseq.msh \n  2019-04-02 15:06:04  Databases not present - downloading basic databases now... \n  2019-04-02 15:06:04  Downloading mash refseq sketch... \n  2019-04-02 15:06:07  Downloading cgMLST-derived data for Escherichia, Salmonella, and Listeria... \n  2019-04-02 15:06:12  Did not find rMLST databases, if you want to use ConFindr on genera other than Listeria, Salmonella, and Escherichia, you'll need to download them. Instructions are available at https://olc-bioinformatics.github.io/ConFindr/install/#downloading-confindr-databases\n\n  2019-04-02 15:06:12  Beginning analysis of sample example... \n  2019-04-02 15:06:12  Checking for cross-species contamination... \n  2019-04-02 15:06:29  Extracting conserved core genes... \n  2019-04-02 15:06:37  Quality trimming... \n  2019-04-02 15:06:38  Detecting contamination... \n  2019-04-02 15:07:05  Done! Number of contaminating SNVs found: 214\n\n  2019-04-02 15:07:05  Contamination detection complete! \n\n\n\n\nThe run shouldn't take too long - depending on how powerful your machine is, it should be done in\none to two minutes (slightly longer if an \nEscherichia\n specific database has not yet been set up).\nOnce the run is done, you'll be able to inspect your results. Take a look at \noutput/confindr_report.csv\n:\nThe \nContamStatus\n column should read \nTrue\n, and the \nNumContamSNVs\n column should have a value of something close to 200.\n\n\nIn any future uses of ConFindr, databases will not need to be re-downloaded.\n\n\nInterpreting ConFindr Results\n\n\nThe results file that ConFindr produces is in comma-separated value (CSV) format, which can be opened by any spreadsheet application (Excel, LibreOffice, etc.) or your favorite text editor.\n\n\nThe file has the following headers: \nSample\n, \nGenus\n, \nNumContamSNVs\n, \nContamStatus\n, \nPercentContam\n, \nPercentContamStandardDeviation\n, and \nBasesExamined\n. Of these, ContamStatus is the most important - it will be \nTrue\n if a sample\nis contaminated, and \nFalse\n if a sample is not contaminated. Detailed descriptions of each header follow.\n\n\n\n\nSample\n: The name of the sample. ConFindr will take everything before the first underscore (_) character to be the name of the sample, as done with samples coming from an Illumina MiSeq.\n\n\nGenus\n: The genus that ConFindr thinks your sample is. If ConFindr couldn't figure out what genus your sample is from, this will be NA.\nIf multiple genera were found, they will all be listed here, separated by a \n:\n\n\nNumContamSNVs\n: The number of times ConFindr found sites with more than one base present.\n\n\nContamStatus\n: The most important of all! Will read \nTrue\n if contamination is present in the sample, and \nFalse\n if contamination is not present. The result will be \nTrue\n if any of the following conditions are met:\n\n\nMore than 1 contaminating SNV per 10000 base pairs examined was found.\n\n\nThere is cross contamination between genera.\n\n\n\n\n\n\nPercentContam\n: Based on the depth of the minor variant for sites with multiple bases, ConFindr guesses\nat what percent of your reads come from a contaminant. The more sequencing depth you have, the more accurate this will\nget. For lower levels of contamination (around 5 percent) this tends to get overestimated, but the number gets more accurate as\ncontamination level increases, as well as sequencing depth.\n\n\nPercentContamStandardDeviation\n: The standard deviation of the percentage contamination estimate. Very high values may\nindicate something strange is going on.\n\n\nBasesExamined\n: The number of bases ConFindr examined when making the contamination call. Will usally be around 20kb for rMLST databases,\n and will vary when other databases are used.\n\n\nDatabaseDownloadDate\n: Date that rMLST databases were downloaded, if you have them. As these are curated and updated regularly,\nit's a good idea to re-run \nconfindr_database_setup\n every now and then.\n\n\n\n\nConFindr will also produce two CSV files for each sample - one called \nsamplename_contamination.csv\n, which shows the contaminating\nsites, and one called \nsamplename_rmlst.csv\n, which shows ConFindr's guess at which allele is present for each rMLST gene.\n\n\nUsing ConFindr in a Python Script\n\n\nIn the event you'd rather integrate ConFindr into a script than run from the command line, here's how:\n\n\nfrom confindr_src import confindr\n\n# Find read files.\npaired_reads = confindr.find_paired_reads('path_to_fastq_folder', forward_id='_R1', reverse_id='_R2')\n# Run confindr. This assumes that you have already downloaded the databases. If you haven't,\n# you can run confindr.check_for_databases_and_download(database_location='path/where/you/want/to/download, tmpdir='a/tmp/dir')\nfor pair in paired_reads:\n    confindr.find_contamination(pair=pair,\n                                forward_id='_R1', # change if yours is different\n                                threads=4, \n                                output_folder='path/to/output',\n                                databases_folder='path/to/databases')\n\n\n\n\n\nUsing Schemes other than rMLST\n\n\nAs of ConFindr 0.4.4, ConFindr has the option to use a cgMLST scheme instead of an rMLST scheme for increased\ncontamination detection sensitivity. This hasn't been tested extensively, but looks to be working. Runtime is\nincreased by a factor of 2 or 3 compared to running against rMLST genes. \n\n\nTo use this option, you'll need a a cgMLST FASTA file - all FASTA headers should be in format >genename_allele\n\n\nIn order to decrease computation time, clustering the cgMLST FASTA before running is recommended. CD-HIT on default\nparameters does this fairly well.\n\n\ncgMLST files that are already clustered are available for \nSalmonella\n and \nEscherichia\n. To get them:\n\n\nEscherichia: \nwget 'https://scist01.blob.core.windows.net/olc/Escherichia_cgmlst.fasta?sp=r&st=2018-10-25T13:45:13Z&se=2020-10-31T21:45:13Z&spr=https&sv=2017-11-09&sig=0fgvcf6R%2BSSiz7gPm7KKm5M78wpjAPjGawhzt%2BlY7iE%3D&sr=b' -O Escherichia_cgmlst.fasta\n\n\nSalmonella: \nwget 'https://scist01.blob.core.windows.net/olc/Salmonella_cgmlst.fasta?sp=r&st=2018-10-25T13:35:21Z&se=2020-10-31T21:35:21Z&spr=https&sv=2017-11-09&sig=w5Pq9e4hsa6PGr458%2Bx4b5zqf4F2a6OUUL9H3ewQTNc%3D&sr=b' -O Salmonella_cgmlst.fasta\n\n\nWhen using a cgMLST database, ConFindr will use the provided scheme for all samples regardless of genus.\n\n\nActually calling ConFindr with cgMLST:\n\n\nconfindr.py -i folder-with-Escherichia-files -o cgmlst-output -cgmlst /path/to/Escherichia_cgmlst.fasta\n\n\nOptional Arguments\n\n\nConFindr has a few optional arguments that allow you to modify its other parameters. Optional arguments are:\n\n\n\n\n-t, --threads\n: The number of threads to run ConFindr analysis with. The default is to use all threads available on your machine, and ConFindr scales very well with more threads, so it's recommended that this option be left at the default unless you need the computational resources for something else.\n\n\n-d\n, --databases`: Path to ConFindr databases. These will be downloaded automatically if not present.\n\n\n-k\n, --keep_files`: Set this flag to keep intermediate files. Useful if you want to do manual inspection of the BAM files\nthat ConFindr creates, which are deleted by default.\n\n\n-fid, --forward_id\n: The identifier for forward reads in your input FASTQ folder. By default, this is \n_R1\n. If you follow a different naming scheme, this is the parameter to change.\n\n\n-rid, --reverse_id\n: The identifier for reverse reads in your input FASTQ folder. By default, this is \n_R2\n. If you follow a different naming scheme, this is the parameter to change. \n\n\n-v, --version\n: Display ConFindr version and exit.\n\n\n-verbosity, --verbosity\n: How much you want printed to the screen. Choose \ndebug\n to get some extra, or \nwarning\n to\nget almost nothing. Default is \ninfo\n.\n\n\n-b\n, \n--base_cutoff\n: The number of high-quality bases needed to call a site as multiallelic, and therefore \ncontributing to contamination. Defaults to 2, which is usually sensitive without producing false positives.\nIf dealing with high depth samples, adding the \n-bf\n parameter set to around \n0.05\n is likely to be helpful in reducing\nfalse positives.\n\n\n-bf\n, \n--base_fraction_cutoff\n: The proportion of high-quality bases needed to call a site as multiallelic, and therefore \ncontributing to contamination. Must be between 0 and 1. Not used by default.\n\n\n-q\n, \n--quality_cutoff\n: The phred score a base needs to have before it's considered\ntrustworthy enough to contribute to a site being multiallelic. Defaults to 20, which should\nbe suitable for most purposes. \n\n\n--rmlst\n: By default, ConFindr will use custom core-gene derived datasets for \nEscherichia\n, \nListeria\n, and \nSalmonella\n\ninstead of rMLST. Activate this flag to force use of rMLST genes for all genera.\n\n\n--cross_details\n: By default, when ConFindr finds cross-contaminated samples it stops analysis. Activate\nthis flag to have analysis of number of cSNVs continue in order to get an estimate of percentage contamination.",
            "title": "Usage"
        },
        {
            "location": "/usage/#example-dataset",
            "text": "An example dataset has been uploaded to FigShare. You can download it to your current working directory with the following command:  wget https://ndownloader.figshare.com/files/9972709 && tar xf 9972709  This example dataset contains two different serotypes of  Escherichia coli  mixed together - it's about 80/20 split of O103 and O157. Contamination like this is difficult to detect\nwith regular tools - it's possible to pick up that it's two different strains, but it can be finicky. ConFindr, however, has no difficulty picking up the fact that this sample is contaminated.  In order to have ConFindr analyze this sample, the parameters you need to provide are:   -i, --input_directory : The path to a directory containing the reads, in FASTQ format, that you want analyzed. If you're using the example dataset, you'll want to enter  example-data  -o, --output_name : The base name for your output. If you put  output  for this parameter, a folder called  output  will be created, and a file called  confindr_report.csv  with contamination\ninformation will be created in this folder   So, if the  example-data  folder were downloaded to your current working directory and you want to have an output folder called  output , the command to run ConFindr would be:  confindr.py -i example-data -o output  You can use absolute or relative paths, and trailing slashes are also acceptable for the directories specified.\nIf ConFindr is properly installed, you should see something similar to the following appear on your terminal:    2019-04-02 15:06:04  Welcome to ConFindr 0.7.0! Beginning analysis of your samples... \n  2019-04-02 15:06:04  Could not find Escherichia_db_cgderived.fasta \n  2019-04-02 15:06:04  Could not find Listeria_db_cgderived.fasta \n  2019-04-02 15:06:04  Could not find Salmonella_db_cgderived.fasta \n  2019-04-02 15:06:04  Could not find refseq.msh \n  2019-04-02 15:06:04  Databases not present - downloading basic databases now... \n  2019-04-02 15:06:04  Downloading mash refseq sketch... \n  2019-04-02 15:06:07  Downloading cgMLST-derived data for Escherichia, Salmonella, and Listeria... \n  2019-04-02 15:06:12  Did not find rMLST databases, if you want to use ConFindr on genera other than Listeria, Salmonella, and Escherichia, you'll need to download them. Instructions are available at https://olc-bioinformatics.github.io/ConFindr/install/#downloading-confindr-databases\n\n  2019-04-02 15:06:12  Beginning analysis of sample example... \n  2019-04-02 15:06:12  Checking for cross-species contamination... \n  2019-04-02 15:06:29  Extracting conserved core genes... \n  2019-04-02 15:06:37  Quality trimming... \n  2019-04-02 15:06:38  Detecting contamination... \n  2019-04-02 15:07:05  Done! Number of contaminating SNVs found: 214\n\n  2019-04-02 15:07:05  Contamination detection complete!   The run shouldn't take too long - depending on how powerful your machine is, it should be done in\none to two minutes (slightly longer if an  Escherichia  specific database has not yet been set up).\nOnce the run is done, you'll be able to inspect your results. Take a look at  output/confindr_report.csv :\nThe  ContamStatus  column should read  True , and the  NumContamSNVs  column should have a value of something close to 200.  In any future uses of ConFindr, databases will not need to be re-downloaded.",
            "title": "Example Dataset"
        },
        {
            "location": "/usage/#interpreting-confindr-results",
            "text": "The results file that ConFindr produces is in comma-separated value (CSV) format, which can be opened by any spreadsheet application (Excel, LibreOffice, etc.) or your favorite text editor.  The file has the following headers:  Sample ,  Genus ,  NumContamSNVs ,  ContamStatus ,  PercentContam ,  PercentContamStandardDeviation , and  BasesExamined . Of these, ContamStatus is the most important - it will be  True  if a sample\nis contaminated, and  False  if a sample is not contaminated. Detailed descriptions of each header follow.   Sample : The name of the sample. ConFindr will take everything before the first underscore (_) character to be the name of the sample, as done with samples coming from an Illumina MiSeq.  Genus : The genus that ConFindr thinks your sample is. If ConFindr couldn't figure out what genus your sample is from, this will be NA.\nIf multiple genera were found, they will all be listed here, separated by a  :  NumContamSNVs : The number of times ConFindr found sites with more than one base present.  ContamStatus : The most important of all! Will read  True  if contamination is present in the sample, and  False  if contamination is not present. The result will be  True  if any of the following conditions are met:  More than 1 contaminating SNV per 10000 base pairs examined was found.  There is cross contamination between genera.    PercentContam : Based on the depth of the minor variant for sites with multiple bases, ConFindr guesses\nat what percent of your reads come from a contaminant. The more sequencing depth you have, the more accurate this will\nget. For lower levels of contamination (around 5 percent) this tends to get overestimated, but the number gets more accurate as\ncontamination level increases, as well as sequencing depth.  PercentContamStandardDeviation : The standard deviation of the percentage contamination estimate. Very high values may\nindicate something strange is going on.  BasesExamined : The number of bases ConFindr examined when making the contamination call. Will usally be around 20kb for rMLST databases,\n and will vary when other databases are used.  DatabaseDownloadDate : Date that rMLST databases were downloaded, if you have them. As these are curated and updated regularly,\nit's a good idea to re-run  confindr_database_setup  every now and then.   ConFindr will also produce two CSV files for each sample - one called  samplename_contamination.csv , which shows the contaminating\nsites, and one called  samplename_rmlst.csv , which shows ConFindr's guess at which allele is present for each rMLST gene.",
            "title": "Interpreting ConFindr Results"
        },
        {
            "location": "/usage/#using-confindr-in-a-python-script",
            "text": "In the event you'd rather integrate ConFindr into a script than run from the command line, here's how:  from confindr_src import confindr\n\n# Find read files.\npaired_reads = confindr.find_paired_reads('path_to_fastq_folder', forward_id='_R1', reverse_id='_R2')\n# Run confindr. This assumes that you have already downloaded the databases. If you haven't,\n# you can run confindr.check_for_databases_and_download(database_location='path/where/you/want/to/download, tmpdir='a/tmp/dir')\nfor pair in paired_reads:\n    confindr.find_contamination(pair=pair,\n                                forward_id='_R1', # change if yours is different\n                                threads=4, \n                                output_folder='path/to/output',\n                                databases_folder='path/to/databases')",
            "title": "Using ConFindr in a Python Script"
        },
        {
            "location": "/usage/#using-schemes-other-than-rmlst",
            "text": "As of ConFindr 0.4.4, ConFindr has the option to use a cgMLST scheme instead of an rMLST scheme for increased\ncontamination detection sensitivity. This hasn't been tested extensively, but looks to be working. Runtime is\nincreased by a factor of 2 or 3 compared to running against rMLST genes.   To use this option, you'll need a a cgMLST FASTA file - all FASTA headers should be in format >genename_allele  In order to decrease computation time, clustering the cgMLST FASTA before running is recommended. CD-HIT on default\nparameters does this fairly well.  cgMLST files that are already clustered are available for  Salmonella  and  Escherichia . To get them:  Escherichia:  wget 'https://scist01.blob.core.windows.net/olc/Escherichia_cgmlst.fasta?sp=r&st=2018-10-25T13:45:13Z&se=2020-10-31T21:45:13Z&spr=https&sv=2017-11-09&sig=0fgvcf6R%2BSSiz7gPm7KKm5M78wpjAPjGawhzt%2BlY7iE%3D&sr=b' -O Escherichia_cgmlst.fasta  Salmonella:  wget 'https://scist01.blob.core.windows.net/olc/Salmonella_cgmlst.fasta?sp=r&st=2018-10-25T13:35:21Z&se=2020-10-31T21:35:21Z&spr=https&sv=2017-11-09&sig=w5Pq9e4hsa6PGr458%2Bx4b5zqf4F2a6OUUL9H3ewQTNc%3D&sr=b' -O Salmonella_cgmlst.fasta  When using a cgMLST database, ConFindr will use the provided scheme for all samples regardless of genus.  Actually calling ConFindr with cgMLST:  confindr.py -i folder-with-Escherichia-files -o cgmlst-output -cgmlst /path/to/Escherichia_cgmlst.fasta",
            "title": "Using Schemes other than rMLST"
        },
        {
            "location": "/usage/#optional-arguments",
            "text": "ConFindr has a few optional arguments that allow you to modify its other parameters. Optional arguments are:   -t, --threads : The number of threads to run ConFindr analysis with. The default is to use all threads available on your machine, and ConFindr scales very well with more threads, so it's recommended that this option be left at the default unless you need the computational resources for something else.  -d , --databases`: Path to ConFindr databases. These will be downloaded automatically if not present.  -k , --keep_files`: Set this flag to keep intermediate files. Useful if you want to do manual inspection of the BAM files\nthat ConFindr creates, which are deleted by default.  -fid, --forward_id : The identifier for forward reads in your input FASTQ folder. By default, this is  _R1 . If you follow a different naming scheme, this is the parameter to change.  -rid, --reverse_id : The identifier for reverse reads in your input FASTQ folder. By default, this is  _R2 . If you follow a different naming scheme, this is the parameter to change.   -v, --version : Display ConFindr version and exit.  -verbosity, --verbosity : How much you want printed to the screen. Choose  debug  to get some extra, or  warning  to\nget almost nothing. Default is  info .  -b ,  --base_cutoff : The number of high-quality bases needed to call a site as multiallelic, and therefore \ncontributing to contamination. Defaults to 2, which is usually sensitive without producing false positives.\nIf dealing with high depth samples, adding the  -bf  parameter set to around  0.05  is likely to be helpful in reducing\nfalse positives.  -bf ,  --base_fraction_cutoff : The proportion of high-quality bases needed to call a site as multiallelic, and therefore \ncontributing to contamination. Must be between 0 and 1. Not used by default.  -q ,  --quality_cutoff : The phred score a base needs to have before it's considered\ntrustworthy enough to contribute to a site being multiallelic. Defaults to 20, which should\nbe suitable for most purposes.   --rmlst : By default, ConFindr will use custom core-gene derived datasets for  Escherichia ,  Listeria , and  Salmonella \ninstead of rMLST. Activate this flag to force use of rMLST genes for all genera.  --cross_details : By default, when ConFindr finds cross-contaminated samples it stops analysis. Activate\nthis flag to have analysis of number of cSNVs continue in order to get an estimate of percentage contamination.",
            "title": "Optional Arguments"
        }
    ]
}