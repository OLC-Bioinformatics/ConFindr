{
    "docs": [
        {
            "location": "/",
            "text": "What is ConFindr?\n\n\nConFindr is a pipeline that can detect contamination in bacterial NGS data, both between and within species. It can do this with exceptional sensitivity - two samples mixed together with as few as\n500 SNPs between them (> 99.9 percent identity!) can be identified. This allows for stringent quality control of NGS samples.\n\n\nHow Does ConFindr Work?\n\n\nConFindr works by looking at rMLST genes. These 53 genes are known to be single copy and conserved across all bacteria, making them excellent markers. As they are known to be single copy (with some caveats), any sample that has multiple alleles of one or more rMLST gene is likely to be contaminated. To identify the presence of multiple alleles in a sample, the following workflow is followed:\n\n\n\n\nUse Mash to determine the genus of each sample so that genus-specific rMLST databases can be constructed\nand check for interspecies contamination.\n\n\nPerform stringent quality trimming and bait out reads that contain rMLST gene sequence, using BBDuk.\n\n\nAlign reads back to the rMLST genes.\n\n\nLook at the alignment to find \nContaminating SNVs\n - those that have sites where more than one base is present, indicating\nthat multiple alleles are present, indicating contamination.\n\n\n\n\nConFindr Intra-species Contamination Detection Performance\n\n\nThe below graph shows the magnitude of contamination detected for several synthetic datasets in \nEscherichia coli\n.\nStrains were mixed together that were either identical (and so should have no contamination), not identical but\nhave the same rMLST type (and so are contaminated, but beyond the limit of detection), two strains with the same serotype,\nand therefore very closely related, or two strains of differing serotypes.\n\n\nThe black line on the graph represents our cutoff for contaminated samples - any sample with a magnitude above that\ncan reliably be called contaminated. As can be seen, two different serotypes from the same species are reliably detected\nat contamination levels of 5 percent or higher, two strains of the same serotype are often detected at 10 percent\ncontamination and almost always at 20 percent contamination, and two strains that have the same rMLST or are identical\nnever have contamination detected. Results are very similar for other species.\n\n\n\n\nConFindr Inter-species Contamination Detection\n\n\nConFindr seems to reliably be able to detect interspecies contamination at levels of 5 percent or above, but its checks\nfor interspecies contamination are not particularly rigorous. If you're very worried about interspecies contamination,\nit would be a good idea to put your samples through some sort of metagenomics software (such as Kraken or Kaiju).",
            "title": "Home"
        },
        {
            "location": "/#what-is-confindr",
            "text": "ConFindr is a pipeline that can detect contamination in bacterial NGS data, both between and within species. It can do this with exceptional sensitivity - two samples mixed together with as few as\n500 SNPs between them (> 99.9 percent identity!) can be identified. This allows for stringent quality control of NGS samples.",
            "title": "What is ConFindr?"
        },
        {
            "location": "/#how-does-confindr-work",
            "text": "ConFindr works by looking at rMLST genes. These 53 genes are known to be single copy and conserved across all bacteria, making them excellent markers. As they are known to be single copy (with some caveats), any sample that has multiple alleles of one or more rMLST gene is likely to be contaminated. To identify the presence of multiple alleles in a sample, the following workflow is followed:   Use Mash to determine the genus of each sample so that genus-specific rMLST databases can be constructed\nand check for interspecies contamination.  Perform stringent quality trimming and bait out reads that contain rMLST gene sequence, using BBDuk.  Align reads back to the rMLST genes.  Look at the alignment to find  Contaminating SNVs  - those that have sites where more than one base is present, indicating\nthat multiple alleles are present, indicating contamination.",
            "title": "How Does ConFindr Work?"
        },
        {
            "location": "/#confindr-intra-species-contamination-detection-performance",
            "text": "The below graph shows the magnitude of contamination detected for several synthetic datasets in  Escherichia coli .\nStrains were mixed together that were either identical (and so should have no contamination), not identical but\nhave the same rMLST type (and so are contaminated, but beyond the limit of detection), two strains with the same serotype,\nand therefore very closely related, or two strains of differing serotypes.  The black line on the graph represents our cutoff for contaminated samples - any sample with a magnitude above that\ncan reliably be called contaminated. As can be seen, two different serotypes from the same species are reliably detected\nat contamination levels of 5 percent or higher, two strains of the same serotype are often detected at 10 percent\ncontamination and almost always at 20 percent contamination, and two strains that have the same rMLST or are identical\nnever have contamination detected. Results are very similar for other species.",
            "title": "ConFindr Intra-species Contamination Detection Performance"
        },
        {
            "location": "/#confindr-inter-species-contamination-detection",
            "text": "ConFindr seems to reliably be able to detect interspecies contamination at levels of 5 percent or above, but its checks\nfor interspecies contamination are not particularly rigorous. If you're very worried about interspecies contamination,\nit would be a good idea to put your samples through some sort of metagenomics software (such as Kraken or Kaiju).",
            "title": "ConFindr Inter-species Contamination Detection"
        },
        {
            "location": "/install/",
            "text": "System Requirements\n\n\nConFindr has been tested with Debian-based Linux systems, but should in principle work on any flavour of Linux, as well as MacOSX. Windows is not supported at this time.\n\n\nConFindr should run on any regular desktop/laptop with 8 GB or RAM or more.\n\n\nDownloading ConFindr Databases\n\n\nAutomatic Download\n\n\nAs of ConFindr 0.3.4, ConFindr databases will automatically downloaded (by default to ~/.confindr_db - this location can be changed\nby setting the environmental variable $CONFINDR_DB). You may still manually download the databases and supply the path\nas done for previous versions.\n\n\nManual Download\n\n\nThe databases necessary for making ConFindr run are available for download from FigShare.\n\n\nNavigate to the place you would like to download the database, and use the following commands to download and uncompress the folder:\n\n\nwget https://ndownloader.figshare.com/files/11864267 && tar xf 11864267 && rm 11864267\n\n\nThese commands should create a folder called \ndatabases\n in your current working directory. This folder contains everything you need to run ConFindr - it's what will be specified with the \n-d\n option.\n\n\nInstalling Using Conda (Recommended)\n\n\nConFindr is available within bioconda - to get bioconda installed and running see instructions \nhere\n.\n\n\nWith bioconda running, you can install ConFindr with the following command:\n\n\nconda install -c bioconda confindr\n\n\nWith that done, typing \nconfindr.py\n will bring access the ConFindr pipeline. See the \nUsage\n section for instructions on how to use ConFindr, including a ConFindr run on an example dataset.\n\n\nManual Install\n\n\nExecutable\n\n\nConFindr can also be installed using pip. Use of a virtual environment for ConFindr is highly recommended. To create a virtualenv:\n\n\n\n\nCreate an empty directory (i.e. \nmkdir ~/Virtual_Environments/ConFindr\n)\n\n\nVirtualenv that directory (\nvirtualenv -p /usr/bin/python3 ~/Virtual_Environments/ConFindr\n)\n\n\nActivate the virtualenv (\nsource ~/Virtual_Environments/ConFindr/bin/activate\n)\n\n\nInstall ConFindr - this should also install any packages that ConFindr depends on (\npip install confindr\n)\n\n\n\n\nWith this done, you'll need to make sure that any necessary dependencies are installed.\n\n\nDependencies\n\n\nBefore using ConFindr, you'll need to download and add the following programs to your $PATH:\n\n\n\n\nBBTools (>=37.23)\n\n\nMash (>=2.0)\n\n\nPython (>=3.5)\n\n\n\n\nInstructions on adding programs to your $PATH can be found \nhere\n.\n\n\nIf ConFindr can't find these dependencies when you try to run it, you will see an error message and the program will quit.",
            "title": "Installation"
        },
        {
            "location": "/install/#system-requirements",
            "text": "ConFindr has been tested with Debian-based Linux systems, but should in principle work on any flavour of Linux, as well as MacOSX. Windows is not supported at this time.  ConFindr should run on any regular desktop/laptop with 8 GB or RAM or more.",
            "title": "System Requirements"
        },
        {
            "location": "/install/#downloading-confindr-databases",
            "text": "Automatic Download  As of ConFindr 0.3.4, ConFindr databases will automatically downloaded (by default to ~/.confindr_db - this location can be changed\nby setting the environmental variable $CONFINDR_DB). You may still manually download the databases and supply the path\nas done for previous versions.  Manual Download  The databases necessary for making ConFindr run are available for download from FigShare.  Navigate to the place you would like to download the database, and use the following commands to download and uncompress the folder:  wget https://ndownloader.figshare.com/files/11864267 && tar xf 11864267 && rm 11864267  These commands should create a folder called  databases  in your current working directory. This folder contains everything you need to run ConFindr - it's what will be specified with the  -d  option.",
            "title": "Downloading ConFindr Databases"
        },
        {
            "location": "/install/#installing-using-conda-recommended",
            "text": "ConFindr is available within bioconda - to get bioconda installed and running see instructions  here .  With bioconda running, you can install ConFindr with the following command:  conda install -c bioconda confindr  With that done, typing  confindr.py  will bring access the ConFindr pipeline. See the  Usage  section for instructions on how to use ConFindr, including a ConFindr run on an example dataset.",
            "title": "Installing Using Conda (Recommended)"
        },
        {
            "location": "/install/#manual-install",
            "text": "Executable  ConFindr can also be installed using pip. Use of a virtual environment for ConFindr is highly recommended. To create a virtualenv:   Create an empty directory (i.e.  mkdir ~/Virtual_Environments/ConFindr )  Virtualenv that directory ( virtualenv -p /usr/bin/python3 ~/Virtual_Environments/ConFindr )  Activate the virtualenv ( source ~/Virtual_Environments/ConFindr/bin/activate )  Install ConFindr - this should also install any packages that ConFindr depends on ( pip install confindr )   With this done, you'll need to make sure that any necessary dependencies are installed.  Dependencies  Before using ConFindr, you'll need to download and add the following programs to your $PATH:   BBTools (>=37.23)  Mash (>=2.0)  Python (>=3.5)   Instructions on adding programs to your $PATH can be found  here .  If ConFindr can't find these dependencies when you try to run it, you will see an error message and the program will quit.",
            "title": "Manual Install"
        },
        {
            "location": "/usage/",
            "text": "Usage with a Pip/Conda Install\n\n\nIf you used pip or conda to install, all you need to do is activate your ConFindr virtualenv/type \nconfindr.py\n on the command line. Doing so without providing parameters will give a message telling you what parameters you do need to provide.\n\n\nExample Dataset\n\n\nAn example dataset has been uploaded to FigShare. You can download it to your current working directory with the following command:\n\n\nwget https://ndownloader.figshare.com/files/9972709 && tar xf 9972709\n\n\nThis example dataset contains two different serotypes of \nEscherichia coli\n mixed together - it's about 80/20 split of O103 and O157. Contamination like this is difficult to detect\nwith regular tools - it's possible to pick up that it's two different strains, but it can be finicky. ConFindr, however, has no difficulty picking up the fact that this sample is contaminated.\n\n\nIn order to have ConFindr analyze this sample, the parameters you need to provide are:\n\n\n\n\n-i, --input_directory\n: The path to a directory containing the reads, in FASTQ format, that you want analyzed. If you're using the example dataset, you'll want to enter \nexample-data\n\n\n-o, --output_name\n: The base name for your output. If you put \noutput\n for this parameter, a folder called \noutput\n will be created, and a file called \nconfindr_report.csv\n with contamination\ninformation will be created in this folder\n\n\n\n\nSo, if the \nexample-data\n folder were downloaded to your current working directory and you want to have an output folder called \noutput\n, the command to run ConFindr would be:\n\n\nconfindr.py -i example-data -o output\n\n\nYou can use absolute or relative paths, and trailing slashes are also acceptable for the directories specified.\nIf ConFindr is properly installed, you should see something similar to the following appear on your terminal:\n\n\n  2018-09-10 13:24:32  Welcome to ConFindr 0.4.3! Beginning analysis of your samples...\n  2018-09-10 13:24:32  Databases not present. Downloading to /home/user/.confindr_db. This may take a few minutes...\n  2018-09-10 13:35:46  Databases successfully downloaded...\n  2018-09-10 13:35:46  Beginning analysis of sample example...\n  2018-09-10 13:35:46  Checking for cross-species contamination...\n  2018-09-10 13:35:59  Setting up genus-specific database for genus Escherichia...\n  2018-09-10 13:36:58  Extracting rMLST genes...\n  2018-09-10 13:37:02  Quality trimming...\n  2018-09-10 13:37:02  Detecting contamination...\n  2018-09-10 13:37:20  Done! Number of contaminating SNVs found: 24\n\n  2018-09-10 13:37:20  Contamination detection complete!\n\n\n\n\nThe run shouldn't take too long - depending on how powerful your machine is, it should be done in\none to two minutes (slightly longer if an \nEscherichia\n specific database has not yet been set up).\nOnce the run is done, you'll be able to inspect your results. Take a look at \noutput/confindr_report.csv\n:\nThe \nContamStatus\n column should read \nTrue\n, and the \nNumContamSNVs\n column should have a value of something close to 15.\n\n\nIn any future uses of ConFindr, databases will not need to be re-downloaded.\n\n\nInterpreting ConFindr Results\n\n\nThe results file that ConFindr produces is in comma-separated value (CSV) format, which can be opened by any spreadsheet application (Excel, LibreOffice, etc.) or your favorite text editor.\n\n\nThe file has the following headers: Sample, Genus, NumContamSNVs, NumUniqueKmers, CrossContamination, and ContamStatus. Of these, ContamStatus is the most important - it will be \nTrue\n if a sample\nis contaminated, and \nFalse\n if a sample is not contaminated. Detailed descriptions of each header follow.\n\n\n\n\nSample\n: The name of the sample. ConFindr will take everything before the first underscore (_) character to be the name of the sample, as done with samples coming from an Illumina MiSeq.\n\n\nGenus\n: The genus that ConFindr thinks your sample is. If ConFindr couldn't figure out what genus your sample is from, this will be NA.\nIf multiple genera were found, they will all be listed here, separated by a \n:\n\n\nNumContamSNVs\n: The number of times ConFindr found sites with more than one base present.\n\n\nContamStatus\n: The most important of all! Will read \nTrue\n if contamination is present in the sample, and \nFalse\n if contamination is not present. The result will be \nTrue\n if any of the following conditions are met:\n\n\n3 or more contaminating SNVs are found. \n\n\nThere is cross contamination between genera.\n\n\n\n\n\n\n\n\nAs of version 0.4.2, ConFindr will also attempt to guess at the percentage contamination\nin your sample. This can be found in the \nPercentContam\n column in \nconfindr_report.csv\n, and\nseems to be fairly reliable - on simulated data, the actual percentage contamination always falls within\nthe estimated contamination plus or minus the standard deviation.\n\n\nConFindr will also produce two CSV files for each sample - one called \nsamplename_contamination.csv\n, which shows the contaminating\nsites, and one called \nsamplename_rmlst.csv\n, which shows ConFindr's guess at which allele is present for each rMLST gene.\n\n\nOptional Arguments\n\n\nConFindr has a few optional arguments that allow you to modify its other parameters. Optional arguments are:\n\n\n\n\n-t, --threads\n: The number of threads to run ConFindr analysis with. The default is to use all threads available on your machine, and ConFindr scales very well with more threads, so it's recommended that this option be left at the default unless you need the computational resources for something else.\n\n\n-d\n, --databases`: Path to ConFindr databases. These will be downloaded automatically if not present.\n\n\n-k\n, --keep_files`: Set this flag to keep intermediate files. Useful if you want to do manual inspection of the BAM files\nthat ConFindr creates, which are deleted by default.\n\n\n-fid, --forward_id\n: The identifier for forward reads in your input FASTQ folder. By default, this is \n_R1\n. If you follow a different naming scheme, this is the parameter to change.\n\n\n-rid, --reverse_id\n: The identifier for reverse reads in your input FASTQ folder. By default, this is \n_R2\n. If you follow a different naming scheme, this is the parameter to change. \n\n\n-v, --version\n: Display ConFindr version and exit.\n\n\n-verbosity, --verbosity\n: How much you want printed to the screen. Choose \ndebug\n to get some extra, or \nwarning\n to\nget almost nothing. Default is \ninfo\n.\n\n\n-b\n, \n--base_cutoff\n: The number of high-quality bases needed to call a site as multiallelic, and therefore \ncontributing to contamination. Defaults to 2, which is usually sensitive without producing false positives.\nIf dealing with high depth samples, adding the \n-bf\n parameter set to around \n0.05\n is likely to be helpful in reducing\nfalse positives.\n\n\n-bf\n, \n--base_fraction_cutoff\n: The proportion of high-quality bases needed to call a site as multiallelic, and therefore \ncontributing to contamination. Must be between 0 and 1. Not used by default.\n\n\n-q\n, \n--quality_cutoff\n: The phred score a base needs to have before it's considered\ntrustworthy enough to contribute to a site being multiallelic. Defaults to 20, which should\nbe suitable for most purposes.",
            "title": "Usage"
        },
        {
            "location": "/usage/#usage-with-a-pipconda-install",
            "text": "If you used pip or conda to install, all you need to do is activate your ConFindr virtualenv/type  confindr.py  on the command line. Doing so without providing parameters will give a message telling you what parameters you do need to provide.",
            "title": "Usage with a Pip/Conda Install"
        },
        {
            "location": "/usage/#example-dataset",
            "text": "An example dataset has been uploaded to FigShare. You can download it to your current working directory with the following command:  wget https://ndownloader.figshare.com/files/9972709 && tar xf 9972709  This example dataset contains two different serotypes of  Escherichia coli  mixed together - it's about 80/20 split of O103 and O157. Contamination like this is difficult to detect\nwith regular tools - it's possible to pick up that it's two different strains, but it can be finicky. ConFindr, however, has no difficulty picking up the fact that this sample is contaminated.  In order to have ConFindr analyze this sample, the parameters you need to provide are:   -i, --input_directory : The path to a directory containing the reads, in FASTQ format, that you want analyzed. If you're using the example dataset, you'll want to enter  example-data  -o, --output_name : The base name for your output. If you put  output  for this parameter, a folder called  output  will be created, and a file called  confindr_report.csv  with contamination\ninformation will be created in this folder   So, if the  example-data  folder were downloaded to your current working directory and you want to have an output folder called  output , the command to run ConFindr would be:  confindr.py -i example-data -o output  You can use absolute or relative paths, and trailing slashes are also acceptable for the directories specified.\nIf ConFindr is properly installed, you should see something similar to the following appear on your terminal:    2018-09-10 13:24:32  Welcome to ConFindr 0.4.3! Beginning analysis of your samples...\n  2018-09-10 13:24:32  Databases not present. Downloading to /home/user/.confindr_db. This may take a few minutes...\n  2018-09-10 13:35:46  Databases successfully downloaded...\n  2018-09-10 13:35:46  Beginning analysis of sample example...\n  2018-09-10 13:35:46  Checking for cross-species contamination...\n  2018-09-10 13:35:59  Setting up genus-specific database for genus Escherichia...\n  2018-09-10 13:36:58  Extracting rMLST genes...\n  2018-09-10 13:37:02  Quality trimming...\n  2018-09-10 13:37:02  Detecting contamination...\n  2018-09-10 13:37:20  Done! Number of contaminating SNVs found: 24\n\n  2018-09-10 13:37:20  Contamination detection complete!  The run shouldn't take too long - depending on how powerful your machine is, it should be done in\none to two minutes (slightly longer if an  Escherichia  specific database has not yet been set up).\nOnce the run is done, you'll be able to inspect your results. Take a look at  output/confindr_report.csv :\nThe  ContamStatus  column should read  True , and the  NumContamSNVs  column should have a value of something close to 15.  In any future uses of ConFindr, databases will not need to be re-downloaded.",
            "title": "Example Dataset"
        },
        {
            "location": "/usage/#interpreting-confindr-results",
            "text": "The results file that ConFindr produces is in comma-separated value (CSV) format, which can be opened by any spreadsheet application (Excel, LibreOffice, etc.) or your favorite text editor.  The file has the following headers: Sample, Genus, NumContamSNVs, NumUniqueKmers, CrossContamination, and ContamStatus. Of these, ContamStatus is the most important - it will be  True  if a sample\nis contaminated, and  False  if a sample is not contaminated. Detailed descriptions of each header follow.   Sample : The name of the sample. ConFindr will take everything before the first underscore (_) character to be the name of the sample, as done with samples coming from an Illumina MiSeq.  Genus : The genus that ConFindr thinks your sample is. If ConFindr couldn't figure out what genus your sample is from, this will be NA.\nIf multiple genera were found, they will all be listed here, separated by a  :  NumContamSNVs : The number of times ConFindr found sites with more than one base present.  ContamStatus : The most important of all! Will read  True  if contamination is present in the sample, and  False  if contamination is not present. The result will be  True  if any of the following conditions are met:  3 or more contaminating SNVs are found.   There is cross contamination between genera.     As of version 0.4.2, ConFindr will also attempt to guess at the percentage contamination\nin your sample. This can be found in the  PercentContam  column in  confindr_report.csv , and\nseems to be fairly reliable - on simulated data, the actual percentage contamination always falls within\nthe estimated contamination plus or minus the standard deviation.  ConFindr will also produce two CSV files for each sample - one called  samplename_contamination.csv , which shows the contaminating\nsites, and one called  samplename_rmlst.csv , which shows ConFindr's guess at which allele is present for each rMLST gene.",
            "title": "Interpreting ConFindr Results"
        },
        {
            "location": "/usage/#optional-arguments",
            "text": "ConFindr has a few optional arguments that allow you to modify its other parameters. Optional arguments are:   -t, --threads : The number of threads to run ConFindr analysis with. The default is to use all threads available on your machine, and ConFindr scales very well with more threads, so it's recommended that this option be left at the default unless you need the computational resources for something else.  -d , --databases`: Path to ConFindr databases. These will be downloaded automatically if not present.  -k , --keep_files`: Set this flag to keep intermediate files. Useful if you want to do manual inspection of the BAM files\nthat ConFindr creates, which are deleted by default.  -fid, --forward_id : The identifier for forward reads in your input FASTQ folder. By default, this is  _R1 . If you follow a different naming scheme, this is the parameter to change.  -rid, --reverse_id : The identifier for reverse reads in your input FASTQ folder. By default, this is  _R2 . If you follow a different naming scheme, this is the parameter to change.   -v, --version : Display ConFindr version and exit.  -verbosity, --verbosity : How much you want printed to the screen. Choose  debug  to get some extra, or  warning  to\nget almost nothing. Default is  info .  -b ,  --base_cutoff : The number of high-quality bases needed to call a site as multiallelic, and therefore \ncontributing to contamination. Defaults to 2, which is usually sensitive without producing false positives.\nIf dealing with high depth samples, adding the  -bf  parameter set to around  0.05  is likely to be helpful in reducing\nfalse positives.  -bf ,  --base_fraction_cutoff : The proportion of high-quality bases needed to call a site as multiallelic, and therefore \ncontributing to contamination. Must be between 0 and 1. Not used by default.  -q ,  --quality_cutoff : The phred score a base needs to have before it's considered\ntrustworthy enough to contribute to a site being multiallelic. Defaults to 20, which should\nbe suitable for most purposes.",
            "title": "Optional Arguments"
        }
    ]
}