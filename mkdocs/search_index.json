{
    "docs": [
        {
            "location": "/",
            "text": "ConFindr\n\n\nContamination in NGS can cause problems in downstream analyses when not detected. ConFindr is a pipeline that can detect contamination in bacterial NGS data,\nboth between and within species. \n\n\nTODO: Full description of how ConFindr works/diagram. Add details on ConFindr outputs.",
            "title": "Home"
        },
        {
            "location": "/#confindr",
            "text": "Contamination in NGS can cause problems in downstream analyses when not detected. ConFindr is a pipeline that can detect contamination in bacterial NGS data,\nboth between and within species.   TODO: Full description of how ConFindr works/diagram. Add details on ConFindr outputs.",
            "title": "ConFindr"
        },
        {
            "location": "/install/",
            "text": "System Requirements\n\n\nConFindr has a fair number of dependencies. The easiest way to install ConFindr is by using docker, but other methods are also possible. \nTesting of ConFindr has been done with Ubuntu 16.04 and Linux Mint. Other variants of linux should have no issues,\nand MacOS systems should also work. Windows is not supported at this time, but Windows users should be able to use the docker version.\n\n\nInstalling Using Docker\n\n\nTo install using docker: \ndocker pull olcbioinformatics/confindr\n\n\nThis should download the newest image, complete with the databases that ConFindr needs. For usage with docker, see the Usage page (HYPERLINK ME!)\n\n\nInstalling Using Pip\n\n\nExecutable\n\n\nConFindr can also be installed using pip. Use of a virtual environment for ConFindr is highly recommended. To create a virtualenv:\n\n\n\n\nCreate an empty directory (i.e. \nmkdir ~/Virtual_Environments/ConFindr\n)\n\n\nVirtualenv that directory (\nvirtualenv -p /usr/bin/python3 ~/Virtual_Environments/ConFindr\n)\n\n\nActivate the virtualenv (\nsource ~/Virtual_Environments/ConFindr/bin/activate\n)\n\n\nInstall ConFindr - this should also install any packages that ConFindr depends on (\npip install confindr\n)\n\n\n\n\nWith this done, you'll need to make sure that any necessary dependencies are installed.\n\n\nDependencies\n\n\nBefore using ConFindr, you'll need to download and add the following programs to your $PATH:\n\n\n\n\nBBTools (>=37.23)\n\n\nJellyfish (>= 2.2.6)\n\n\nNCBI BLAST+ (>=2.2.31\n\n\nMash (>=2.0)\n\n\nPython (>=3.5)\n\n\n\n\nInstructions on adding programs to your $PATH can be found \nhere\n.\n\n\nIf ConFindr can't find these dependencies when you try to run it, an \nImportError\n will be raised with a list of unfindable dependences.\n\n\nDatabases\n\n\nOnce you have the executable and dependencies installed, you'll just need to download the databases that ConFindr depends on.\n\n\nTo do this, you'll need to install Git LFS (instructions \nhere\n). \n\n\nThen, clone the ConFindr Git repository (\ngit clone https://github.com/lowandrew/ConFindr.git\n). The \ndatabases\n folder is the important one - you'll need it for calling ConFindr, as seen in the \nUsage\n section.",
            "title": "Installation"
        },
        {
            "location": "/install/#system-requirements",
            "text": "ConFindr has a fair number of dependencies. The easiest way to install ConFindr is by using docker, but other methods are also possible. \nTesting of ConFindr has been done with Ubuntu 16.04 and Linux Mint. Other variants of linux should have no issues,\nand MacOS systems should also work. Windows is not supported at this time, but Windows users should be able to use the docker version.",
            "title": "System Requirements"
        },
        {
            "location": "/install/#installing-using-docker",
            "text": "To install using docker:  docker pull olcbioinformatics/confindr  This should download the newest image, complete with the databases that ConFindr needs. For usage with docker, see the Usage page (HYPERLINK ME!)",
            "title": "Installing Using Docker"
        },
        {
            "location": "/install/#installing-using-pip",
            "text": "Executable  ConFindr can also be installed using pip. Use of a virtual environment for ConFindr is highly recommended. To create a virtualenv:   Create an empty directory (i.e.  mkdir ~/Virtual_Environments/ConFindr )  Virtualenv that directory ( virtualenv -p /usr/bin/python3 ~/Virtual_Environments/ConFindr )  Activate the virtualenv ( source ~/Virtual_Environments/ConFindr/bin/activate )  Install ConFindr - this should also install any packages that ConFindr depends on ( pip install confindr )   With this done, you'll need to make sure that any necessary dependencies are installed.  Dependencies  Before using ConFindr, you'll need to download and add the following programs to your $PATH:   BBTools (>=37.23)  Jellyfish (>= 2.2.6)  NCBI BLAST+ (>=2.2.31  Mash (>=2.0)  Python (>=3.5)   Instructions on adding programs to your $PATH can be found  here .  If ConFindr can't find these dependencies when you try to run it, an  ImportError  will be raised with a list of unfindable dependences.  Databases  Once you have the executable and dependencies installed, you'll just need to download the databases that ConFindr depends on.  To do this, you'll need to install Git LFS (instructions  here ).   Then, clone the ConFindr Git repository ( git clone https://github.com/lowandrew/ConFindr.git ). The  databases  folder is the important one - you'll need it for calling ConFindr, as seen in the  Usage  section.",
            "title": "Installing Using Pip"
        },
        {
            "location": "/usage/",
            "text": "Usage with a Pip Install\n\n\nIf you used pip to install, all you need to do is type \nconfindr.py\n on the command line. Doing so without providing parameters will give a message telling you what parameters you do need to provide.\n\n\nThe parameters you need to provide are (in this order!):\n\n\n\n\nfastq_directory\n: The path to a directory containing the reads, in FASTQ format, that you want analyzed.\n\n\noutput_directory\n: The base name for your output. For example, putting \n/home/user/confindr_output\n would create an output file called \n/home/user/confindr_output.csv\n\n\ndatabases\n: The path to the databases directory obtained when cloning the ConFindr GitHub repository.\n\n\n\n\nSo, if the ConFindr repository was cloned to \n/home/user\n and the data to be analyzed is in \n/home/user/example-data\n, the command to run ConFindr would be:\n\n\nconfindr.py /home/user/example-data /home/user/confindr_output /home/user/ConFindr/databases/\n\n\nThis command will create a file called \n/home/user/confindr_output.csv\n with results, and a file called \n/home/user/confindr_output.log\n which shows the log of what STDOUT and STDERR from programs called\nin the ConFindr pipeline.\n\n\nUsage with Docker\n\n\nUsage with docker is very similar to usage with a pip install. In order to have the output from the docker container accessible by you, you'll need to mount some folders - it's recommended to put the output in your input folder in this case. In this case, if the data to be analyzed is in \n/home/user/example-data\n, the command to run ConFindr would be:\n\n\ndocker run -v /home/user/example-data/:/home/user/example-data/ olcbioinformatics/confindr confindr.py /home/user/example-data/ /home/user/example-data/confindr_output /home/user/ConFindr/databases/\n \n\n\nIn this case, the output file \nconfindr_output.csv\n will be found in \n/home/user/example-data/\n.\n\n\nOptional Arguments\n\n\nConFindr has a few optional arguments that allow you to modify its parameters. These should be placed after the positional arguments described above. Optional arguments are:\n\n\n\n\n-t, --threads\n: The number of threads to run ConFindr analysis with. The default is to use all threads available on your machine, and ConFindr scales very well with more threads, so it's recommended that this option be left at the default unless you need the computational resources for somethin else.\n\n\n-n, --number_subsamples\n: The number of times you want ConFindr to sample your rMLST reads to try to detect contamination. By default this is set to 5.\n\n\n-k, --kmer-size\n: The kmer size ConFindr uses to try to detect contamination. Default is 31. Usage with other values may produce very unreliable results and is \nnot\n recommended.\n\n\n-s, --subsample_depth\n: Coverage depth to subsample to. Default value is 20, which provides a good tradeoff between sensitvity and specificity. Going any lower will make it very difficult to detect contamination, and going higher will increase the false positive rate.\n\n\n-c, --kmer_cutoff\n: The cutoff for the number of times a kmer must be seen before it is considered trustworthy and is included in the analysis. By default set to 2. Setting any lower this this essentially guarantees that your analysis will be overrun by false positives called by sequencing errors.\n\n\n\n\nGenerally speaking, none of these parameters should be changed; ConFindr has been tested extensively with its default parameters and been found to work very well.",
            "title": "Usage"
        },
        {
            "location": "/usage/#usage-with-a-pip-install",
            "text": "If you used pip to install, all you need to do is type  confindr.py  on the command line. Doing so without providing parameters will give a message telling you what parameters you do need to provide.  The parameters you need to provide are (in this order!):   fastq_directory : The path to a directory containing the reads, in FASTQ format, that you want analyzed.  output_directory : The base name for your output. For example, putting  /home/user/confindr_output  would create an output file called  /home/user/confindr_output.csv  databases : The path to the databases directory obtained when cloning the ConFindr GitHub repository.   So, if the ConFindr repository was cloned to  /home/user  and the data to be analyzed is in  /home/user/example-data , the command to run ConFindr would be:  confindr.py /home/user/example-data /home/user/confindr_output /home/user/ConFindr/databases/  This command will create a file called  /home/user/confindr_output.csv  with results, and a file called  /home/user/confindr_output.log  which shows the log of what STDOUT and STDERR from programs called\nin the ConFindr pipeline.",
            "title": "Usage with a Pip Install"
        },
        {
            "location": "/usage/#usage-with-docker",
            "text": "Usage with docker is very similar to usage with a pip install. In order to have the output from the docker container accessible by you, you'll need to mount some folders - it's recommended to put the output in your input folder in this case. In this case, if the data to be analyzed is in  /home/user/example-data , the command to run ConFindr would be:  docker run -v /home/user/example-data/:/home/user/example-data/ olcbioinformatics/confindr confindr.py /home/user/example-data/ /home/user/example-data/confindr_output /home/user/ConFindr/databases/    In this case, the output file  confindr_output.csv  will be found in  /home/user/example-data/ .",
            "title": "Usage with Docker"
        },
        {
            "location": "/usage/#optional-arguments",
            "text": "ConFindr has a few optional arguments that allow you to modify its parameters. These should be placed after the positional arguments described above. Optional arguments are:   -t, --threads : The number of threads to run ConFindr analysis with. The default is to use all threads available on your machine, and ConFindr scales very well with more threads, so it's recommended that this option be left at the default unless you need the computational resources for somethin else.  -n, --number_subsamples : The number of times you want ConFindr to sample your rMLST reads to try to detect contamination. By default this is set to 5.  -k, --kmer-size : The kmer size ConFindr uses to try to detect contamination. Default is 31. Usage with other values may produce very unreliable results and is  not  recommended.  -s, --subsample_depth : Coverage depth to subsample to. Default value is 20, which provides a good tradeoff between sensitvity and specificity. Going any lower will make it very difficult to detect contamination, and going higher will increase the false positive rate.  -c, --kmer_cutoff : The cutoff for the number of times a kmer must be seen before it is considered trustworthy and is included in the analysis. By default set to 2. Setting any lower this this essentially guarantees that your analysis will be overrun by false positives called by sequencing errors.   Generally speaking, none of these parameters should be changed; ConFindr has been tested extensively with its default parameters and been found to work very well.",
            "title": "Optional Arguments"
        }
    ]
}